window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "sinr.sinr.graph_embeddings", "modulename": "sinr.sinr.graph_embeddings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sinr.sinr.graph_embeddings.SINr", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr", "kind": "class", "doc": "<p>Object that can be used to extract word or graph embeddings using the SINr approach.\nThis object cannot then be used to inspect the resulting vectors. Instead, using the ModelBuilder class, a SINrVectors object should be created that will allow to use the resulting vectors.</p>\n\n<p>...</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>Attributes should not be read</p>\n"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.__init__", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.__init__", "kind": "function", "doc": "<p>Should not be used ! Some factory methods below starting with \"load_\" should be used instead.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>graph : networkit graph\nlgcc : networkit graph\n    the largest connected component of graph\nwrd_to_idx : dict\n    A matching between a vocabulary and ids. Useful for text. Otherwise, the vocabulary and the ids are the same.\nn_jobs : int, optional\n    Number of jobs that should be runned. The default is 1.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">lgcc</span>, </span><span class=\"param\"><span class=\"n\">wrd_to_idx</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.load_from_cooc_pkl", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.load_from_cooc_pkl", "kind": "function", "doc": "<p>Build a sinr object from a co-occurrence matrix stored as a pickle : useful to deal with textual data.\nCo-occurrence matrices should for instance be generated using sinr.text.cooccurrence</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>cooc_matrix_path : string\n    Path to the cooccurrence matrix generated using sinr.text.cooccurrence : the file should be a pickle\nnorm : strategy_norm, optional\n    If the graph weights be normalized (for example using PMI). The default is None.\nn_jobs : int, optional\n    Number of jobs that should be used The default is 1.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    A SINr object, this method acts as a factory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">cooc_matrix_path</span>, </span><span class=\"param\"><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.load_from_adjacency_matrix", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.load_from_adjacency_matrix", "kind": "function", "doc": "<p>Build a sinr object from an adjacency matrix as a sparse one (csr)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>matrix_object : csr_matrix\n    Matrix describing the graph.\nnorm : strategy_norm, optional\n    If the graph weights be normalized (for example using PMI). The default is None.\nn_jobs : int, optional\n    Number of jobs that should be used The default is 1.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    A SINr object, this method acts as a factory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">matrix_object</span>, </span><span class=\"param\"><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.load_from_graph", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.load_from_graph", "kind": "function", "doc": "<p>Build a sinr object from a networkit graph object</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>graph : networkit\n    Networkit graph object.\nnorm : strategy_norm, optional\n    If the graph weights be normalized (for example using PMI). The default is None.\nn_jobs : int, optional\n    Number of jobs that should be used The default is 1.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    A SINr object, this method acts as a factory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.run", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.run", "kind": "function", "doc": "<p>Runs the training of the embedding, i.e. community detection + vectors extraction</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>algo : networkit.algo.community, optional\n    Community detection algorithm. The default, None allorws to run a Louvain algorithm</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.detect_communities", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.detect_communities", "kind": "function", "doc": "<p>Runs community detection on the graph</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>gamma : int, optional\n    For Louvain algorithm which is the default algorithm (ignore this parameter if param algo is used), allows to control the size of the communities. The greater it is, the smaller the communities. The default is 100.\nalgo : networkit.algo.community, optional\n    Community detection algorithm. The default, None allorws to run a Louvain algorithm\ninspect : boolean, optional\n    Whether or not one wants to get insight about the communities extracted. The default is True.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>communities : networkit partition\n    Community structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inspect</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.extract_embeddings", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.extract_embeddings", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>communities : networkit partition\n    Community structures</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Extracts the vectors and store them in the SINr object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">communities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_out_of_LgCC_coms", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_out_of_LgCC_coms", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">communities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_cooc_graph", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_cooc_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_nr", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_nr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_np", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_np", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_nfm", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_nfm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_vocabulary", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_vocabulary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_wrd_to_id", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_wrd_to_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINr.get_communities", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINr.get_communities", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.get_lgcc", "modulename": "sinr.sinr.graph_embeddings", "qualname": "get_lgcc", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>graph : networkit graph</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>out_of_LgCC : networkit graph\n    the largest connected component of the graph provided as a parameter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.get_graph_from_matrix", "modulename": "sinr.sinr.graph_embeddings", "qualname": "get_graph_from_matrix", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>matrix : coo_matrix\n    A sparse matrix describing a graph</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>graph : networkit graph\n    the graph corresponding to the coo matrix</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.NoCommunityDetectedException", "modulename": "sinr.sinr.graph_embeddings", "qualname": "NoCommunityDetectedException", "kind": "class", "doc": "<p>Raised when the communities were not detected</p>\n", "bases": "builtins.Exception"}, {"fullname": "sinr.sinr.graph_embeddings.NoEmbeddingExtractedException", "modulename": "sinr.sinr.graph_embeddings", "qualname": "NoEmbeddingExtractedException", "kind": "class", "doc": "<p>Raised when the embeddings were not extracted</p>\n", "bases": "builtins.Exception"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder", "kind": "class", "doc": "<p>Object that should be used after the training of word or graph embeddings using the SINr object.\nThe ModelBuilder will make use of the SINr object to build a SINrVectors object that will allow to use the resulting vectors efficiently.\n...</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>Attributes should not be read</p>\n"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.__init__", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.__init__", "kind": "function", "doc": "<p>Creating a ModelBuilder object to build a SINrVectors one</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>sinr : SINr\n    A SINr object with extracted vectors\nname : string\n    Name of the model\nn_jobs : TYPE, optional\n    DESCRIPTION. The default is 1.\nn_neighbors : int, optional\n    Number of neighbors to use for similarity. The default is 31.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sinr</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">n_neighbors</span><span class=\"o\">=</span><span class=\"mi\">31</span></span>)</span>"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.with_embeddings_nr", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.with_embeddings_nr", "kind": "function", "doc": "<p>Adding Node Recall vectors to the SINrVectors object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.with_embeddings_nfm", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.with_embeddings_nfm", "kind": "function", "doc": "<p>Adding NFM (Node Recall + Node Predominance) vectors to the SINrVectors object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.with_np", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.with_np", "kind": "function", "doc": "<p>Storing Node predominance values in order to label dimensions for instance</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.with_vocabulary", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.with_vocabulary", "kind": "function", "doc": "<p>To deal with word vectors or graph when nodes have labels</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.with_communities", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.with_communities", "kind": "function", "doc": "<p>To keep the interpretability of the model using the communities</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.ModelBuilder.build", "modulename": "sinr.sinr.graph_embeddings", "qualname": "ModelBuilder.build", "kind": "function", "doc": "<p>To get the SINrVectors object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.NoInterpretabilityException", "modulename": "sinr.sinr.graph_embeddings", "qualname": "NoInterpretabilityException", "kind": "class", "doc": "<p>Raised when the communities were not included in the model that was built. It is thus not interpretable anymore.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sinr.sinr.graph_embeddings.NoVocabularyException", "modulename": "sinr.sinr.graph_embeddings", "qualname": "NoVocabularyException", "kind": "class", "doc": "<p>Raised when no vocabulary was included in the model that was built. One cant play with words.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors", "kind": "class", "doc": "<p>After having trained word or graph embeddings using SINr object, use the ModelBuilder object to build SINrVectors.\nSINrVectors is the object to manipulate the model, explore the embedding space and its interpretability</p>\n"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.__init__", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.__init__", "kind": "function", "doc": "<p>Initializing SINr vectors objets\n@param name: name of the model, useful to save it\n@param n_jobs: number of jobs to use (k-nearest neighbors to obtain most similar words or nodes)\n@param n_neighbors: number of neighbors to consider when querying the most similar words or nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span>, </span><span class=\"param\"><span class=\"n\">n_neighbors</span></span>)</span>"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.set_n_jobs", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.set_n_jobs", "kind": "function", "doc": "<p>@param n_jobs: number of jobs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.set_vocabulary", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.set_vocabulary", "kind": "function", "doc": "<p>@param voc: set the vocabulary when dealing with words or nodes with labels. label parameter is set to True.\nBy default, labels from the vocab will be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">voc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.set_vectors", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.set_vectors", "kind": "function", "doc": "<p>@param embeddings:  initialize the vectors and build the nearest neighbors data structure using sklearn</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">embeddings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.set_np", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.set_np", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">np</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.set_communities", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.set_communities", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">com</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.most_similar", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.most_similar", "kind": "function", "doc": "<p>Get the most similar objects of the one passed as a parameter using the cosine of their vectors</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>obj : integer or string\n    DESCRIPTION.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    DESCRIPTION.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_dimension_descriptors", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_dimension_descriptors", "kind": "function", "doc": "<p>returns the objects that constitute the dimension of obj, i.e. the members of the community of obj\n@param obj: id, word\n@return: a set of object, the community of obj</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_dimension_descriptors_idx", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_dimension_descriptors_idx", "kind": "function", "doc": "<p>returns the objects that constitute the dimension of idx, i.e. the members of the community of idx\n@param idx: int of a node\n@return: the nodes of the community of idx</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_obj_descriptors", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_obj_descriptors", "kind": "function", "doc": "<p>@param obj: an id or a word/label\n@param topk: int, topk dimensions to consider to describe obj\n@return: the dimensions (and the objects that constitute these dimensions) that matter to describe obj</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_dimension_stereotypes", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_dimension_stereotypes", "kind": "function", "doc": "<p>@param obj: id of a dimension, or label of a word (then turned into the id of its community)\n@param topk: topk value to consider on the dimension\n@return: the topk words that describe this dimension (highest values)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_dimension_stereotypes_idx", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_dimension_stereotypes_idx", "kind": "function", "doc": "<p>@param idx: id of a dimension\n@param topk: topk value to consider on the dimension\n@return: the topk words that describe this dimension (highest values)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_obj_stereotypes", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_obj_stereotypes", "kind": "function", "doc": "<p>@param obj: the word to consider\n@param topk_dim: topk dimension to consider\n@param topk_val: topk values to describe each dimension\n@return: the most useful dimensions to describe a word and for each dimension,\nthe topk words that describe this dimension (highest values)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">topk_dim</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">topk_val</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.get_obj_stereotypes_and_descriptors", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.get_obj_stereotypes_and_descriptors", "kind": "function", "doc": "<p>@return: both stereotypes and descriptors</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">topk_dim</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">topk_val</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.load", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sinr.sinr.graph_embeddings.SINrVectors.save", "modulename": "sinr.sinr.graph_embeddings", "qualname": "SINrVectors.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();